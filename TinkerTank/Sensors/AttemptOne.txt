using System;
using System.Collections.Generic;
using System.Text;
using Meadow.Hardware;
using Meadow.Peripherals.Sensors;
using Meadow.Units;
using Meadow.Foundation.Sensors.Distance;
using Meadow.Foundation;
using Meadow;
using System.Threading.Tasks;
using System.Threading;

namespace TinkerTank.Sensors
{

    public class VL6180XDriver : ByteCommsSensorBase<Length>, IRangeFinder
    {
        //==== events
        public event EventHandler<IChangeResult<Length>> DistanceUpdated = delegate { };

        //==== Internal constants:
        protected const byte _VL6180X_DEFAULT_I2C_ADDR = 0x29;
        protected const byte _VL6180X_REG_IDENTIFICATION_MODEL_ID = 0x000;
        protected const byte _VL6180X_REG_SYSTEM_INTERRUPT_CONFIG = 0x014;
        protected const byte _VL6180X_REG_SYSTEM_INTERRUPT_CLEAR = 0x015;
        protected const byte _VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET = 0x016;
        protected const byte _VL6180X_REG_SYSRANGE_START = 0x018;
        protected const byte _VL6180X_REG_SYSALS_START = 0x038;
        protected const byte _VL6180X_REG_SYSALS_ANALOGUE_GAIN = 0x03F;
        protected const byte _VL6180X_REG_SYSALS_INTEGRATION_PERIOD_HI = 0x040;
        protected const byte _VL6180X_REG_SYSALS_INTEGRATION_PERIOD_LO = 0x041;
        protected const byte _VL6180X_REG_RESULT_ALS_VAL = 0x050;
        protected const byte _VL6180X_REG_RESULT_RANGE_VAL = 0x062;
        protected const byte _VL6180X_REG_RESULT_RANGE_STATUS = 0x04D;
        protected const byte _VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO = 0x04F;

        //==== User-facing constants:
        protected const byte ALS_GAIN_1 = 0x06;
        protected const byte ALS_GAIN_1_25 = 0x05;
        protected const byte ALS_GAIN_1_67 = 0x04;
        protected const byte ALS_GAIN_2_5 = 0x03;
        protected const byte ALS_GAIN_5 = 0x02;
        protected const byte ALS_GAIN_10 = 0x01;
        protected const byte ALS_GAIN_20 = 0x00;
        protected const byte ALS_GAIN_40 = 0x07;

        protected const byte ERROR_NONE = 0;
        protected const byte ERROR_SYSERR_1 = 1;
        protected const byte ERROR_SYSERR_5 = 5;
        protected const byte ERROR_ECEFAIL = 6;
        protected const byte ERROR_NOCONVERGE = 7;
        protected const byte ERROR_RANGEIGNORE = 8;
        protected const byte ERROR_SNR = 11;
        protected const byte ERROR_RAWUFLOW = 12;
        protected const byte ERROR_RAWOFLOW = 13;
        protected const byte ERROR_RANGEUFLOW = 14;
        protected const byte ERROR_RANGEOFLOW = 15;

        public const byte DefaultI2cAddress = 0x29;

        protected const int VcselPeriodPreRange = 0;
        protected const int VcselPeriodFinalRange = 1;

        //==== public properties and such
        public enum UnitType
        {
            mm,
            cm,
            inches
        }

        public bool IsShutdown
        {
            get
            {
                if (shutdownPort != null)
                {
                    return !shutdownPort.State;
                }
                else
                {
                    return false;
                }
            }
        }

        /// <summary>
        /// The distance to the measured object.
        /// </summary>
        public Length? Distance { get; protected set; } = new Length(0);

        /// <summary>
        /// Minimum valid distance in mm.
        /// </summary>
        public Length MinimumDistance => new Length(30, Length.UnitType.Millimeters);

        /// <summary>
        /// Maximum valid distance in mm (CurrentDistance returns -1 if above).
        /// </summary>
        public Length MaximumDistance => new Length(2000, Length.UnitType.Millimeters);

        readonly IDigitalOutputPort shutdownPort;

        byte stopVariable;

        public VL6180XDriver(
            IDigitalOutputController device, 
            II2cBus i2cBus,
            byte address = DefaultI2cAddress)
                : this(device, i2cBus, null, address)
        {
        }

        /// <param name="i2cBus">I2C bus</param>
        /// <param name="address">VL53L0X address</param>
        /// <param name="units">Unit of measure</param>
        public VL6180XDriver(
            IDigitalOutputController device, 
            II2cBus i2cBus, 
            IPin shutdownPin,
            byte address = DefaultI2cAddress)
                : base(i2cBus, address)
        {
            if (shutdownPin != null)
            {
                device.CreateDigitalOutputPort(shutdownPin, true);
            }
            Initialize().Wait();
        }

        protected override void RaiseEventsAndNotify(IChangeResult<Length> changeResult)
        {
            DistanceUpdated?.Invoke(this, changeResult);
            base.RaiseEventsAndNotify(changeResult);
        }

        /// <summary>
        /// Initializes the VL53L0X
        /// </summary>
        protected async Task Initialize()
        {
            if (IsShutdown)
            {
                await ShutDown(false);
            }

            var readData = Read(_VL6180X_REG_IDENTIFICATION_MODEL_ID);

            if (readData != 0xB4)
            {
                throw new Exception("Failed to find expected ID register values" + Convert.ToString(readData));
            }

            LoadSettings();

            Peripheral.WriteRegister(_VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
        }

        private void LoadSettings()
        {
            Peripheral.WriteRegister(Convert.ToByte(0x0207), 0x01);
            Peripheral.WriteRegister(Convert.ToByte(0x0208), 0x01);
            Peripheral.WriteRegister(Convert.ToByte(0x0096), 0x00);
            Peripheral.WriteRegister(Convert.ToByte(0x0097), 0xFD);
            Peripheral.WriteRegister(Convert.ToByte(0x00E3), 0x00);
            Peripheral.WriteRegister(Convert.ToByte(0x00E4), 0x04);
            Peripheral.WriteRegister(Convert.ToByte(0x00E5), 0x02);
            Peripheral.WriteRegister(Convert.ToByte(0x00E6), 0x01);
            Peripheral.WriteRegister(Convert.ToByte(0x00E7), 0x03);
            Peripheral.WriteRegister(Convert.ToByte(0x00F5), 0x02);
            Peripheral.WriteRegister(Convert.ToByte(0x00D9), 0x05);
            Peripheral.WriteRegister(Convert.ToByte(0x00DB), 0xCE);
            Peripheral.WriteRegister(Convert.ToByte(0x00DC), 0x03);
            Peripheral.WriteRegister(Convert.ToByte(0x00DD), 0xF8);
            Peripheral.WriteRegister(Convert.ToByte(0x009F), 0x00);
            Peripheral.WriteRegister(Convert.ToByte(0x00A3), 0x3C);
            Peripheral.WriteRegister(Convert.ToByte(0x00B7), 0x00);
            Peripheral.WriteRegister(Convert.ToByte(0x00BB), 0x3C);
            Peripheral.WriteRegister(Convert.ToByte(0x00B2), 0x09);
            Peripheral.WriteRegister(Convert.ToByte(0x00CA), 0x09);
            Peripheral.WriteRegister(Convert.ToByte(0x0198), 0x01);
            Peripheral.WriteRegister(Convert.ToByte(0x01B0), 0x17);
            Peripheral.WriteRegister(Convert.ToByte(0x01AD), 0x00);
            Peripheral.WriteRegister(Convert.ToByte(0x00FF), 0x05);
            Peripheral.WriteRegister(Convert.ToByte(0x0100), 0x05);
            Peripheral.WriteRegister(Convert.ToByte(0x0199), 0x05);
            Peripheral.WriteRegister(Convert.ToByte(0x01A6), 0x1B);
            Peripheral.WriteRegister(Convert.ToByte(0x01AC), 0x3E);
            Peripheral.WriteRegister(Convert.ToByte(0x01A7), 0x1F);
            Peripheral.WriteRegister(Convert.ToByte(0x0030), 0x00);
            Peripheral.WriteRegister(Convert.ToByte(0x0011), 0x10);
            Peripheral.WriteRegister(Convert.ToByte(0x010A), 0x30);
            Peripheral.WriteRegister(Convert.ToByte(0x003F), 0x46);
            Peripheral.WriteRegister(Convert.ToByte(0x0031), 0xFF);
            Peripheral.WriteRegister(Convert.ToByte(0x0040), 0x63);
            Peripheral.WriteRegister(Convert.ToByte(0x002E), 0x01);
            Peripheral.WriteRegister(Convert.ToByte(0x001B), 0x09);
            Peripheral.WriteRegister(Convert.ToByte(0x003E), 0x31);
            Peripheral.WriteRegister(Convert.ToByte(0x0014), 0x24);
        }

        /// <summary>
        /// Returns the current distance/range
        /// </summary>
        /// <returns>The distance in the specified Units. Default mm. Returns -1 if the shutdown pin is used and is off</returns>
        protected override async Task<Length> ReadSensor()
        {
            //Console.WriteLine("ReadSensor");

            if (IsShutdown)
            {
                return new Length(-1f, Length.UnitType.Millimeters);
            }

            // get the distance
            var distance = new Length(await GetRawRangeData(), Length.UnitType.Millimeters);

            // throw away invalid distances if out of range
            if (distance > MaximumDistance)
            {
                distance = new Length(-1, Length.UnitType.Millimeters);
            }

            return distance;
        }

        /// <summary>
        /// Set the Shutdown state of the device
        /// </summary>
        /// <param name="state">true = off/shutdown. false = on</param>
        public async Task ShutDown(bool state)
        {
            if (shutdownPort == null)
            {
                return;
            }

            shutdownPort.State = !state;
            await Task.Delay(2).ConfigureAwait(false);

            if (state == false)
            {
                await Initialize();
                // TODO: is this still needed? the previous line wasn't awaited before.
                await Task.Delay(2).ConfigureAwait(false);
            }
        }

        protected byte Read(byte address)
        {
            var result = Peripheral.ReadRegister(address);
            return result;
        }

        protected int Read16(byte address)
        {
            //var result = Peripheral.ReadRegisters(address, 2);
            Peripheral.ReadRegister(address, ReadBuffer.Span[0..2]);
            return (ReadBuffer.Span[0] << 8) | ReadBuffer.Span[1];
        }

        protected async Task<int> GetRawRangeData()
        {
            Peripheral.WriteRegister(_VL6180X_REG_SYSRANGE_START, 0x01);

            var range = Peripheral.ReadRegister(_VL6180X_REG_RESULT_RANGE_VAL);

            var range_mm = range + 10;
            Peripheral.WriteRegister(_VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);

            return range_mm;
        }

    }
}